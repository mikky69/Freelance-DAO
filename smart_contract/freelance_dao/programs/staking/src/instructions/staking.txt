instructions/admin.rs
// programs/staking/src/instructions/admin.rs
use anchor_lang::prelude::*;

pub fn set_pool_params(_ctx: Context<()>, _rate: Option<u64>, _paused: Option<bool>) -> Result<()> {
    // TODO: Implement admin functions
    Ok(())
}

pub fn set_rewards_params(_ctx: Context<()>, _rate: Option<u64>, _paused: Option<bool>) -> Result<()> {
    // TODO: Implement admin functions  
    Ok(())
}


// programs/staking/src/instructions/init.rs
use anchor_lang::prelude::*;
use anchor_spl::token::{Token, TokenAccount, Mint};
use crate::state_accounts::{RewardsConfig, StakePool};
use crate::errors::StakingError;

#[derive(Accounts)]
pub struct InitRewardsConfig<'info> {
    #[account(
        init,
        payer = admin,
        space = RewardsConfig::SPACE,
        seeds = [b"rewards_config"],
        bump
    )]
    pub rewards_config: Account<'info, RewardsConfig>,
    #[account(mut)]
    pub admin: Signer<'info>,
    pub system_program: Program<'info, System>,
}

pub fn init_rewards_config(
    ctx: Context<InitRewardsConfig>,
    fl_dao_mint: Pubkey,
    exchange_rate: u64,
    admin: Pubkey,
) -> Result<()> {
    let rewards_config = &mut ctx.accounts.rewards_config;
    
    rewards_config.admin = admin;
    rewards_config.fl_dao_mint = fl_dao_mint;
    rewards_config.exchange_rate = exchange_rate;
    rewards_config.treasury = Pubkey::default(); // Set later
    rewards_config.mint_authority = Pubkey::default(); // Set later  
    rewards_config.global_points_issued = 0;
    rewards_config.global_fldao_minted = 0;
    rewards_config.paused = false;
    rewards_config.bump = ctx.bumps.rewards_config;
    
    Ok(())
}

#[derive(Accounts)]
pub struct InitPool<'info> {
    #[account(
        seeds = [b"rewards_config"],
        bump = rewards_config.bump,
        has_one = admin @ StakingError::Unauthorized
    )]
    pub rewards_config: Account<'info, RewardsConfig>,
    #[account(
        init,
        payer = admin,
        space = StakePool::SPACE,
        seeds = [b"pool", mint.key().as_ref()],
        bump
    )]
    pub pool: Account<'info, StakePool>,
    #[account(
        init,
        payer = admin,
        token::mint = mint,
        token::authority = pool,
        seeds = [b"vault", pool.key().as_ref()],
        bump
    )]
    pub vault: Account<'info, TokenAccount>,
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub admin: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

pub fn init_pool(
    ctx: Context<InitPool>,
    mint: Pubkey,
    is_lp: bool,
    points_per_token_per_second: u64,
) -> Result<()> {
    let pool = &mut ctx.accounts.pool;
    let clock = Clock::get()?;
    
    pool.mint = mint;
    pool.vault = ctx.accounts.vault.key();
    pool.is_lp = is_lp;
    pool.points_per_token_per_second = points_per_token_per_second;
    pool.total_staked = 0;
    pool.total_points_issued = 0;
    pool.created_at = clock.unix_timestamp;
    pool.paused = false;
    pool.bump = ctx.bumps.pool;
    
    Ok(())
}

// programs/staking/src/math.rs
use anchor_lang::prelude::*;
use crate::errors::StakingError;

// Q32.32 fixed point for precise points calculation
pub const Q32: u64 = 1u64 << 32;

pub fn calculate_points_accrued(
    amount: u64,
    rate_per_second: u64,  // Q32.32 format
    duration_seconds: i64,
) -> Result<u128> {
    if duration_seconds < 0 {
        return Ok(0);
    }
    
    let duration = duration_seconds as u128;
    let amount_expanded = amount as u128;
    let rate_expanded = rate_per_second as u128;
    
    // points = (amount * rate * duration) / Q32
    let points = amount_expanded
        .checked_mul(rate_expanded)
        .ok_or(StakingError::MathOverflow)?
        .checked_mul(duration)
        .ok_or(StakingError::MathOverflow)?
        .checked_div(Q32 as u128)
        .ok_or(StakingError::MathOverflow)?;
        
    Ok(points)
}

pub fn points_to_fldao(points: u128, exchange_rate: u64) -> Result<u64> {
    if exchange_rate == 0 {
        return Err(StakingError::InvalidExchangeRate.into());
    }
    
    let fldao_amount = points
        .checked_div(exchange_rate as u128)
        .ok_or(StakingError::MathOverflow)?;
        
    if fldao_amount > u64::MAX as u128 {
        return Err(StakingError::MathOverflow.into());
    }
    
    Ok(fldao_amount as u64)
}

// programs/staking/src/instructions/mod.rs
pub mod init;
pub mod staking;
pub mod rewards;
pub mod admin;
pub mod utils;

pub use init::*;
pub use staking::*;
pub use rewards::*;
pub use admin::*;
pub use utils::*;

// programs/staking/src/instructions/rewards.rs
use anchor_lang::prelude::*;

pub fn exchange_points(_ctx: Context<()>, _points: u128, _min_out: u64) -> Result<()> {
    // TODO: Implement points to $FLDAO exchange
    Ok(())
}

// programs/staking/src/instructions/staking.rs
use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer};
use crate::state_accounts::{StakePool, StakePosition};
use crate::errors::StakingError;
use crate::events::{Staked, Unstaked};
use crate::utils::update_position_points;

#[derive(Accounts)]
pub struct Stake<'info> {
    #[account(mut)]
    pub pool: Account<'info, StakePool>,
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    #[account(
        init_if_needed,
        payer = staker,
        space = StakePosition::SPACE,
        seeds = [b"position", pool.key().as_ref(), staker.key().as_ref()],
        bump
    )]
    pub position: Account<'info, StakePosition>,
    #[account(mut)]
    pub staker: Signer<'info>,
    #[account(mut)]
    pub staker_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

pub fn stake(ctx: Context<Stake>, amount: u64) -> Result<()> {
    let pool = &mut ctx.accounts.pool;
    let position = &mut ctx.accounts.position;
    let clock = Clock::get()?;
    
    if pool.paused {
        return Err(StakingError::PoolPaused.into());
    }
    
    if amount == 0 {
        return Err(StakingError::AmountTooSmall.into());
    }
    
    // Update points before changing stake amount
    update_position_points(position, pool, clock.unix_timestamp)?;
    
    // Initialize position if first stake
    if position.staker == Pubkey::default() {
        position.staker = ctx.accounts.staker.key();
        position.pool = pool.key();
        position.amount = 0;
        position.accum_points = 0;
        position.created_at = clock.unix_timestamp;
        position.bump = ctx.bumps.position;
    }
    
    // Transfer tokens to vault
    token::transfer(
        CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.staker_token_account.to_account_info(),
                to: ctx.accounts.vault.to_account_info(),
                authority: ctx.accounts.staker.to_account_info(),
            },
        ),
        amount,
    )?;
    
    // Update amounts
    position.amount = position.amount
        .checked_add(amount)
        .ok_or(StakingError::MathOverflow)?;
        
    pool.total_staked = pool.total_staked
        .checked_add(amount)
        .ok_or(StakingError::MathOverflow)?;
    
    emit!(Staked {
        pool: pool.key(),
        staker: position.staker,
        amount,
        new_total: position.amount,
        timestamp: clock.unix_timestamp,
    });
    
    Ok(())
}

#[derive(Accounts)]
pub struct Unstake<'info> {
    #[account(mut)]
    pub pool: Account<'info, StakePool>,
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    #[account(
        mut,
        has_one = staker @ StakingError::Unauthorized
    )]
    pub position: Account<'info, StakePosition>,
    #[account(mut)]
    pub staker: Signer<'info>,
    #[account(mut)]
    pub staker_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
}

pub fn unstake(ctx: Context<Unstake>, amount: u64) -> Result<()> {
    let pool = &mut ctx.accounts.pool;
    let position = &mut ctx.accounts.position;
    let clock = Clock::get()?;
    
    if amount == 0 {
        return Err(StakingError::AmountTooSmall.into());
    }
    
    if position.amount < amount {
        return Err(StakingError::InsufficientStaked.into());
    }
    
    // Update points before changing stake amount
    update_position_points(position, pool, clock.unix_timestamp)?;
    
    // Transfer tokens back to user
    let pool_key = pool.key();
    let pool_seeds = &[
        b"pool",
        pool.mint.as_ref(),
        &[pool.bump],
    ];
    
    token::transfer(
        CpiContext::new_with_signer(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.vault.to_account_info(),
                to: ctx.accounts.staker_token_account.to_account_info(),
                authority: pool.to_account_info(),
            },
            &[pool_seeds],
        ),
        amount,
    )?;
    
    // Update amounts
    position.amount = position.amount
        .checked_sub(amount)
        .ok_or(StakingError::MathOverflow)?;
        
    pool.total_staked = pool.total_staked
        .checked_sub(amount)
        .ok_or(StakingError::MathOverflow)?;
    
    emit!(Unstaked {
        pool: pool.key(),
        staker: position.staker,
        amount,
        remaining: position.amount,
        timestamp: clock.unix_timestamp,
    });
    
    Ok(())
}

#[derive(Accounts)]
pub struct SyncPosition<'info> {
    pub pool: Account<'info, StakePool>,
    #[account(
        mut,
        has_one = staker @ StakingError::Unauthorized
    )]
    pub position: Account<'info, StakePosition>,
    pub staker: Signer<'info>,
}

pub fn sync_position(ctx: Context<SyncPosition>) -> Result<()> {
    let pool = &ctx.accounts.pool;
    let position = &mut ctx.accounts.position;
    let clock = Clock::get()?;
    
    let points_earned = update_position_points(position, pool, clock.unix_timestamp)?;
    
    if points_earned > 0 {
        emit!(crate::events::PointsAccrued {
            pool: pool.key(),
            staker: position.staker,
            delta_points: points_earned,
            total_points: position.accum_points,
            timestamp: clock.unix_timestamp,
        });
    }
    
    Ok(())
}

// programs/staking/src/instructions/utils.rs
use anchor_lang::prelude::*;

pub fn get_staked_amount(_ctx: Context<()>) -> Result<u64> {
    // TODO: Implement view function for governance
    Ok(0)
}

// programs/staking/src/constants.rs
pub const SECONDS_PER_DAY: i64 = 86400;
pub const MIN_STAKE_AMOUNT: u64 = 1_000_000; // 1 USDC (6 decimals)
pub const MIN_UNSTAKE_AMOUNT: u64 = 1_000_000; // 1 USDC

// Default rates (points per token per day, converted to Q32.32 per second)
pub const DEFAULT_USDC_DAILY_RATE: u64 = 1_000_000; // 1 point per USDC per day
pub const DEFAULT_LP_DAILY_RATE: u64 = 1_500_000;   // 1.5x multiplier for LP


// programs/staking/src/events.rs
use anchor_lang::prelude::*;

#[event]
pub struct Staked {
    pub pool: Pubkey,
    pub staker: Pubkey,
    pub amount: u64,
    pub new_total: u64,
    pub timestamp: i64,
}

#[event]
pub struct Unstaked {
    pub pool: Pubkey,
    pub staker: Pubkey,
    pub amount: u64,
    pub remaining: u64,
    pub timestamp: i64,
}

#[event]
pub struct PointsAccrued {
    pub pool: Pubkey,
    pub staker: Pubkey,
    pub delta_points: u128,
    pub total_points: u128,
    pub timestamp: i64,
}

#[event]
pub struct PointsExchanged {
    pub staker: Pubkey,
    pub points_burned: u128,
    pub fldao_minted: u64,
    pub exchange_rate: u64,
    pub timestamp: i64,
}

// programs/staking/src/state_accounts.rs
use anchor_lang::prelude::*;

#[account]
#[derive(Default)]
pub struct RewardsConfig {
    pub admin: Pubkey,                    // 32
    pub fl_dao_mint: Pubkey,             // 32  
    pub exchange_rate: u64,              // 8   (points per $FLDAO)
    pub treasury: Pubkey,                // 32  (treasury PDA)
    pub mint_authority: Pubkey,          // 32  (PDA for minting)
    pub global_points_issued: u128,      // 16  (tracking)
    pub global_fldao_minted: u64,        // 8   (tracking)
    pub paused: bool,                    // 1
    pub bump: u8,                        // 1
}

impl RewardsConfig {
    pub const SPACE: usize = 8 + 32 * 4 + 8 + 16 + 8 + 1 + 1; // 170 bytes
}

#[account]
#[derive(Default)]
pub struct StakePool {
    pub mint: Pubkey,                    // 32  (USDC or LP token)
    pub vault: Pubkey,                   // 32  (token account PDA)
    pub is_lp: bool,                     // 1
    pub points_per_token_per_second: u64, // 8   (Q32.32 fixed point)
    pub total_staked: u64,               // 8
    pub total_points_issued: u128,       // 16
    pub created_at: i64,                 // 8
    pub paused: bool,                    // 1
    pub bump: u8,                        // 1
}

impl StakePool {
    pub const SPACE: usize = 8 + 32 * 2 + 1 + 8 + 8 + 16 + 8 + 1 + 1; // 115 bytes
}

#[account]
#[derive(Default)]
pub struct StakePosition {
    pub staker: Pubkey,                  // 32
    pub pool: Pubkey,                    // 32  (StakePool PDA)
    pub amount: u64,                     // 8   (tokens staked)
    pub accum_points: u128,              // 16  (accrued staking points)
    pub last_update_ts: i64,             // 8   (for point calculation)
    pub created_at: i64,                 // 8
    pub bump: u8,                        // 1
}

impl StakePosition {
    pub const SPACE: usize = 8 + 32 * 2 + 8 + 16 + 8 + 8 + 1; // 113 bytes
}

// programs/staking/src/state.rs
use anchor_lang::prelude::*;

#[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug, PartialEq)]
pub enum PoolType {
    Single,  // Single token (USDC)
    LP,      // LP token pair
}

impl Default for PoolType {
    fn default() -> Self {
        PoolType::Single
    }
}
